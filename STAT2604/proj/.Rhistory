```{r}
test_score_2 = lr_cutoff(pred.lr3.test, test$Good_Customer,
"acc", "f")
test_score_2 +
geom_vline(xintercept = c(lr_train_cut_2, 0.5),
linetype = "dashed")
lr_test_class_2 = lr_cut_pred(pred.lr3.test, lr_train_cut_2)
# matrix
lr_test_sum_2 = confusionMatrix(lr_test_class_2, as.factor(as.numeric(c(0,1))[test$Good_Customer]),
positive = "1",
mode = "everything")
lr_test_sum_2
lr_test_sum
set.seed(5312)
lr.fit <- glm(formula = Good_Customer ~ ., data = train, family=binomial)
summary(lr.fit)
lr_imp_split(lr.fit)
varImp(lr.fit)
train_score = lr_cutoff(pred.lr.train, train$Good_Customer,
"acc", "f")
train_score +
geom_vline(xintercept = c(0.2, 0.5),
linetype = "dashed")
lr_train_cut = 0.2
lr_train_class = lr_cut_pred(pred.lr.train, lr_train_cut)
lr_train_sum = confusionMatrix(lr_train_class, as.factor(as.numeric(c(0,1))[train$Good_Customer]),
positive = "1",
mode = "everything")
lr_train_sum
test_score = lr_cutoff(pred.lr.test, test$Good_Customer,
"acc", "f")
test_score +
geom_vline(xintercept = c(lr_train_cut, 0.5),
linetype = "dashed")
lr_test_class = lr_cut_pred(pred.lr.test, lr_train_cut)
lr_test_sum = confusionMatrix(lr_test_class, as.factor(as.numeric(c(0,1))[test$Good_Customer]),
positive = "1",
mode = "everything")
lr_test_sum
lr_train_sum
lr_train_sum
lr_test_sum
ggplot(df, aes(x=Employment, y=Annual_Income, fill=Good_Customer)) +
geom_boxplot()
ggplot(df, aes(x = Installment_Percentage, fill = Good_Customer)) +
geom_density(alpha=0.8) +
ggtitle("Installment Percentage")
library(ggplot2)
setwd("~/Documents/HKU/STAT2604/proj")
customer <- read.table("Customer Data", header = TRUE, sep = ";")
library(tidyverse)
library(scales)
library(mice)
library(caret)
library(MASS)
library(corrplot)
library(cowplot)
library(ggcorrplot)
library(ROCR)
library(ggplot2)
dim(customer)
impute <- mice(customer, m=5, seed = 5312)
df <- complete(impute, 1)
apply(apply(df,2,is.na),2,sum) ; nrow(df)
library(tidyverse)
library(scales)
library(mice)
library(caret)
library(MASS)
library(corrplot)
library(cowplot)
library(ggcorrplot)
library(ROCR)
library(ggplot2)
setwd("~/Documents/HKU/STAT2604/proj")
customer <- read.table("Customer Data", header = TRUE, sep = ";")
dim(customer)
str(customer)
table(customer$Good_Customer)
table(customer$Bad_Customer)
customer[customer==""] <- NA
customer = customer[, 2:16]
customer[,7] = readr::parse_number(customer[,7])
customer[,6] = factor(customer[,6], levels = c("1", "2", "3", "4", "5"))
customer[,11:15] <- lapply(customer[,11:15], factor)
summary(customer)
per_of_missing <- function(x) {sum(is.na(x))/length(x)*100}
apply(customer, 2, per_of_missing)
customer = customer[!is.na(customer$Number_of_Dependants),]
apply(customer, 2, per_of_missing)
impute <- mice(customer, m=5, seed = 5312)
df <- complete(impute, 1)
df <- complete(impute, 1)
apply(apply(df,2,is.na),2,sum) ; nrow(df)
ggplot(df, aes(x=Employment, y=Annual_Income, fill=Good_Customer)) +
geom_boxplot()
ggplot(df, aes(x=Employment, y=Annual_Income, fill=Good_Customer)) +
geom_boxplot() +
ylab("Annual Income") +
labs(fill = "Good Customer")
ggplot(df, aes(x = Installment_Percentage, fill = Good_Customer)) +
geom_density(alpha=0.8) +
ggtitle("Installment Percentage")
ggplot(df, aes(x = Installment_Percentage, fill = Good_Customer)) +
geom_density(alpha=0.8) +
ggtitle("Installment Percentage") +
ylab("Installment Percentage") +
labs(fill = "Good Customer")
ggplot(df, aes(x = Installment_Percentage, fill = Good_Customer)) +
geom_density(alpha=0.8) +
ggtitle("Installment Percentage") +
xlab("Installment Percentage") +
labs(fill = "Good Customer")
df_fac = df %>%
dplyr::select(where(is.factor))
cramer = matrix(NA, ncol(df_fac), ncol(df_fac))
for (i in (1:ncol(df_fac))){
for (j in (1:ncol(df_fac))){
tab = table(df_fac[, i], df_fac[, j])
chisq_results = chisq.test(tab)
cramer[i, j] = sqrt(chisq_results$statistic/(nrow(df_fac) * (min(dim(tab)) -1)))
}
}
cramer = round(cramer, 3)
colnames(cramer) = colnames(df_fac)
rownames(cramer) = colnames(df_fac)
corrplot(cramer,
method = "shade",
type = "upper",
diag = F,
tl.srt = 45,
tl.col = "black",
tl.cex = 0.6,
addCoef.col = "darkgreen",
addCoefasPercent = T)
df_num = df %>%
dplyr::select(where(is.numeric))
df_num$Good_Customer = df$Good_Customer
model.matrix(~0+., data=df_num) %>%
cor(use="pairwise.complete.obs") %>%
ggcorrplot(show.diag = F, type="lower", lab=TRUE, lab_size=2)
trainIndex <- createDataPartition(df$Good_Customer, p = .8, list = FALSE)
train <- df[ trainIndex,]
test  <- df[-trainIndex,]
lr_imp_split = function(model){
if (class(model)[1] == "ranger"){
imp_df = model$variable.importance %>%
data.frame("Overall" = .) %>%
rownames_to_column() %>%
rename(variable = rowname) %>%
arrange(-Overall)
} else {
imp_df = varImp(model) %>%
rownames_to_column() %>%
rename(variable = rowname) %>%
arrange(-Overall)
}
gg1 = imp_df %>%
slice(1:floor(nrow(.)/2)) %>%
ggplot() +
aes(x = reorder(variable, Overall), weight = Overall, fill = -Overall) +
geom_bar() +
coord_flip() +
xlab("Variables") +
ylab("Importance") +
theme(legend.position = "none")
imp_range = ggplot_build(gg1)[["layout"]][["panel_params"]][[1]][["x.range"]]
imp_gradient = scale_fill_gradient(limits = c(-imp_range[2], -imp_range[1]),
low = "#132B43",
high = "#56B1F7")
gg2 = imp_df %>%
slice(floor(nrow(.)/2)+1:nrow(.)) %>%
ggplot() +
aes(x = reorder(variable, Overall), weight = Overall, fill = -Overall) +
geom_bar() +
coord_flip() +
xlab("") +
ylab("Importance") +
theme(legend.position = "none") +
ylim(imp_range) +
imp_gradient
gg_both = plot_grid(gg1 + imp_gradient,
gg2)
return(gg_both)
}
lr_cutoff = function(score, obs, measure1, measure2) {
predictions = prediction(score, obs)
performance1 = performance(predictions, measure1)
performance2 = performance(predictions, measure2)
df1 = data.frame(x = performance1@x.values[[1]],
y = performance1@y.values[[1]],
measure = measure1,
stringsAsFactors = F) %>%
drop_na()
df2 = data.frame(x = performance2@x.values[[1]],
y = performance2@y.values[[1]],
measure = measure2,
stringsAsFactors = F) %>%
drop_na()
df = df1 %>%
bind_rows(df2)
y_max_measure1 = max(df1$y, na.rm = T)
x_max_measure1 = df1[df1$y == y_max_measure1, "x"][1]
y_max_measure2 = max(df2$y, na.rm = T)
x_max_measure2 = df2[df2$y == y_max_measure2, "x"][1]
txt_measure1 = paste("Best cut for", measure1, ": x =", round(x_max_measure1, 3))
txt_measure2 = paste("Best cut for", measure2, ": x =", round(x_max_measure2, 3))
txt_tot = paste(txt_measure1, "\n", txt_measure2, sep = "")
gg = df %>%
ggplot() +
aes(x = x,
y = y,
colour = measure) +
geom_line() +
geom_vline(xintercept = c(x_max_measure1, x_max_measure2), linetype = "dashed", color = "gray") +
geom_hline(yintercept = c(y_max_measure1, y_max_measure2), linetype = "dashed", color = "gray") +
labs(caption = txt_tot) +
theme(plot.caption = element_text(hjust = 0)) +
xlim(c(0, 1)) +
ylab("") +
xlab("Threshold")
return(gg)
}
lr_cut_pred = function(score, cut) {
classes = score
classes[classes > cut] = 1
classes[classes <= cut] = 0
classes = as.factor(classes)
return(classes)
}
set.seed(5312)
lr.fit <- glm(formula = Good_Customer ~ ., data = train, family=binomial)
summary(lr.fit)
lr_imp_split(lr.fit)
varImp(lr.fit)
set.seed(5312)
lr.fit <- glm(formula = Good_Customer ~ ., data = train, family=binomial)
summary(lr.fit)
lr_imp_split(lr.fit)
varImp(lr.fit)
pred.lr.train = predict(lr.fit, newdata = train, type = "response")
pred.lr.test = predict(lr.fit, newdata = test, type = "response")
train_score = lr_cutoff(pred.lr.train, train$Good_Customer,
"acc", "f")
train_score +
geom_vline(xintercept = c(0.2, 0.5),
linetype = "dashed")
lr_train_cut = 0.2
lr_train_class = lr_cut_pred(pred.lr.train, lr_train_cut)
lr_train_sum = confusionMatrix(lr_train_class, as.factor(as.numeric(c(0,1))[train$Good_Customer]),
positive = "1",
mode = "everything")
lr_train_sum
set.seed(5312)
lr.fit <- glm(formula = Good_Customer ~ ., data = train, family=binomial)
summary(lr.fit)
lr_imp_split(lr.fit)
varImp(lr.fit)
set.seed(5312)
lr.fit <- glm(formula = Good_Customer ~ ., data = train, family=binomial)
summary(lr.fit)
lr_imp_split(lr.fit)
varImp(lr.fit)
pred.lr.train = predict(lr.fit, newdata = train, type = "response")
pred.lr.test = predict(lr.fit, newdata = test, type = "response")
train_score = lr_cutoff(pred.lr.train, train$Good_Customer,
"acc", "f")
train_score +
geom_vline(xintercept = c(0.2, 0.5),
linetype = "dashed")
lr_train_cut = 0.2
lr_train_class = lr_cut_pred(pred.lr.train, lr_train_cut)
confusionMatrix(lr_train_class, as.factor(as.numeric(c(0,1))[train$Good_Customer]),
positive = "1",
mode = "everything")
test_score = lr_cutoff(pred.lr.test, test$Good_Customer,
"acc", "f")
test_score +
geom_vline(xintercept = c(lr_train_cut, 0.5),
linetype = "dashed")
lr_test_class = lr_cut_pred(pred.lr.test, lr_train_cut)
confusionMatrix(lr_test_class, as.factor(as.numeric(c(0,1))[test$Good_Customer]),
positive = "1",
mode = "everything")
table(customer$Good_Customer, customer$Bad_Customer)
t(sapply(customer$Good_Customer,function(x) tapply(x,customer$Bad_Customer,sum)))
table(customer$Good_Customer)
table(customer$Bad_Customer)
table(customer$Bad_Customer)
setwd("~/Documents/HKU/STAT2604/proj")
customer <- read.table("Customer Data", header = TRUE, sep = ";")
table(customer$Good_Customer)
table(customer$Bad_Customer)
per_of_missing <- function(x) {sum(is.na(x))/length(x)*100}
apply(customer, 2, per_of_missing)
customer[customer==""] <- NA
customer = customer[, 2:16]
customer[,7] = readr::parse_number(customer[,7])
customer[,6] = factor(customer[,6], levels = c("1", "2", "3", "4", "5"))
customer[,11:15] <- lapply(customer[,11:15], factor)
summary(customer)
per_of_missing <- function(x) {sum(is.na(x))/length(x)*100}
apply(customer, 2, per_of_missing)
setwd("~/Documents/HKU/STAT2604/proj")
customer <- read.table("Customer Data", header = TRUE, sep = ";")
customer[customer==""] <- NA
customer = customer[, 2:16]
customer[,7] = readr::parse_number(customer[,7])
customer[,6] = factor(customer[,6], levels = c("1", "2", "3", "4", "5"))
customer[,11:15] <- lapply(customer[,11:15], factor)
summary(customer)
per_of_missing <- function(x) {sum(is.na(x))/length(x)*100}
apply(customer, 2, per_of_missing)
customer = customer[!is.na(customer$Number_of_Dependants),]
impute <- mice(customer, m=5, seed = 5312)
df <- complete(impute, 1)
ggplot(df, aes(x=Employment, y=Annual_Income, fill=Good_Customer)) +
geom_boxplot() +
ylab("Annual Income") +
labs(fill = "Good Customer")
ggplot(df, aes(x = Installment_Percentage, fill = Good_Customer)) +
geom_density(alpha=0.8) +
ggtitle("Installment Percentage") +
xlab("Installment Percentage") +
labs(fill = "Good Customer")
corrplot(cramer, method = "shade", type = "upper", diag = F, tl.srt = 45,  tl.col = "black",
tl.cex = 0.6, addCoef.col = "darkgreen", addCoefasPercent = T)
df_fac = df %>% dplyr::select(where(is.factor))
cramer = matrix(NA, ncol(df_fac), ncol(df_fac))
for (i in (1:ncol(df_fac))){
for (j in (1:ncol(df_fac))){
tab = table(df_fac[, i], df_fac[, j])
chisq_results = chisq.test(tab)
cramer[i, j] = sqrt(chisq_results$statistic/(nrow(df_fac) * (min(dim(tab)) -1)))
}
}
cramer = round(cramer, 3)
colnames(cramer) = colnames(df_fac)
rownames(cramer) = colnames(df_fac)
corrplot(cramer, method = "shade", type = "upper", diag = F, tl.srt = 45,  tl.col = "black",
tl.cex = 0.6, addCoef.col = "darkgreen", addCoefasPercent = T)
df_num = df %>% dplyr::select(where(is.numeric))
df_num$Good_Customer = df$Good_Customer
model.matrix(~0+., data=df_num) %>%
cor(use="pairwise.complete.obs") %>%
ggcorrplot(show.diag = F, type="lower", lab=TRUE, lab_size=2) +
theme(axis.text.x = element_text(size=8),
axis.text.y = element_text(size=8))
train_score = lr_cutoff(pred.lr.train, train$Good_Customer, "acc", "f")
train_score + geom_vline(xintercept = c(0.2, 0.5), linetype = "dashed")
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
setwd("~/Documents/HKU/STAT2604/proj")
customer <- read.table("Customer Data", header = TRUE, sep = ";")
customer[customer==""] <- NA
customer = customer[, 2:16]
customer[,7] = readr::parse_number(customer[,7])
customer[,6] = factor(customer[,6], levels = c("1", "2", "3", "4", "5"))
customer[,11:15] <- lapply(customer[,11:15], factor)
summary(customer)
customer[customer==""] <- NA
customer = customer[, 2:16]
summary(customer)
summary(customer)
customer = customer[!is.na(customer),]
summary(customer)
setwd("~/Documents/HKU/STAT2604/proj")
customer <- read.table("Customer Data", header = TRUE, sep = ";")
customer[customer==""] <- NA
customer = customer[, 2:16]
customer[,6] = factor(customer[,6], levels = c("1", "2", "3", "4", "5"))
customer[,7] = readr::parse_number(customer[,7])
customer[,11:15] <- lapply(customer[,11:15], factor)
summary(customer)
```
customer = customer[!is.na(customer),]
summary(customer)
setwd("~/Documents/HKU/STAT2604/proj")
customer <- read.table("Customer Data", header = TRUE, sep = ";")
customer[customer==""] <- NA
customer = customer[, 2:16]
customer[,6] = factor(customer[,6], levels = c("1", "2", "3", "4", "5"))
customer[,7] = readr::parse_number(customer[,7])
customer[,11:15] <- lapply(customer[,11:15], factor)
summary(customer)
customer <- na.omit(customer)
summary(customer)
ggplot(df, aes(x=Employment, y=Annual_Income, fill=Good_Customer)) +
geom_boxplot(colour="red", alpha=0.2)
View(df)
ggplot(df, aes(x=Residential_Status, y=Amount, fill=Good_Customer)) +
geom_boxplot(colour="red", alpha=0.2)
boxplot(df, aes(x=Time_at_Current_Employment, y=Annual_Income, )) +
geom_line() +
geom_point()
boxplot(df, aes(x=Time_at_Current_Employment, y=Annual_Income)) +
geom_line() +
geom_point()
data_frame_f = df %>%
dplyr::select(where(is.factor))
cramer = matrix(NA, ncol(data_frame_f), ncol(data_frame_f))
for (i in (1:ncol(data_frame_f))){
for (j in (1:ncol(data_frame_f))){
tab = table(data_frame_f[, i], data_frame_f[, j])
chisq_results = chisq.test(tab)
cramer[i, j] = sqrt(chisq_results$statistic/(nrow(data_frame_f) * (min(dim(tab)) -1)))
}
}
cramer = round(cramer, 3)
colnames(cramer) = colnames(data_frame_f)
rownames(cramer) = colnames(data_frame_f)
corrplot(cramer,method = "shade",type = "upper",diag = F,tl.srt = 40,tl.col = "darkblue",tl.cex = 0.5,addCoef.col = "red",addCoefasPercent = T)
corrplot(cramer,method = "shade",type = "lower",diag = F,tl.srt = 40,tl.col = "darkblue",tl.cex = 0.5,addCoef.col = "red",addCoefasPercent = T)
corrplot(cramer,method = "shade",type = "lower",diag = F,tl.srt = 40,tl.col = "darkblue",tl.cex = 0.5,addCoef.col = "red",addCoefasPercent = F)
model.matrix(~0+., data=data_frame_number) %>%
cor(use="pairwise.complete.obs") %>%
ggcorrplot(show.diag = F, type="lower", lab=TRUE, lab_size=2)
data_frame_number = df %>% dplyr::select(where(is.numeric))
data_frame_number$Good_Customer = df$Good_Customer
model.matrix(~0+., data=data_frame_number) %>%
cor(use="pairwise.complete.obs") %>%
ggcorrplot(show.diag = F, type="lower", lab=TRUE, lab_size=2)
View(df)
View(df)
View(df)
ggplot(df, aes(x=Delayed_Missed_Payments, y=Installment_Percentage, fill=Good_Customer)) +
geom_boxplot(colour="red", alpha=0.2)
train_data_set <- createDataPartition(df$Good_Customer, p = .8, list = FALSE)
train <- df[ train_data_set,]
test <- df[-train_data_set,]
control <- trainControl(method="cv", number=10)
metric <- "Accuracy"
```{r}
set.seed(123)
rf.fit <- train(is_stress ~ ., data=train, method="rf", metric=metric, trControl=control)
set.seed(123)
rf.fit <- train(Good_Customer ~ ., data=train, method="rf", metric=metric, trControl=control)
summary(rf.fit)
pred.rf <- predict(rf.fit, newdata=test)
confusionMatrix(pred.rf, as.factor(as.numeric(c(0,1))[test$Good_Customer]),
positive = "1", mode = "everything")
pred.rf
confusionMatrix(as.factor(as.numeric(c(0,1))[pred.rf], as.factor(as.numeric(c(0,1))[test$Good_Customer]),
positive = "1", mode = "everything")
confusionMatrix(as.factor(as.numeric(c(0,1))pred.rf, as.factor(as.numeric(c(0,1))[test$Good_Customer]),
confusionMatrix(as.factor(as.numeric(c(0,1))pred.rf), as.factor(as.numeric(c(0,1))[test$Good_Customer]),
positive = "1", mode = "everything")
confusionMatrix(pred.rf, test$Good_Customer),
positive = "1", mode = "everything")
confusionMatrix(pred.rf, test$Good_Customer),
positive = "1", mode = "everything")
pred.rf
test$Good_Customer
confusionMatrix(pred.rf, test$Good_Customer),
positive = "Yes", mode = "everything")
confusionMatrix(pred.rf, test$Good_Customer), positive = "Yes", mode = "everything")
as.factor(as.numeric(c(0,1))[test$Good_Customer]
as.factor(as.numeric(c(0,1))[test$Good_Customer]
as.factor(as.numeric(c(0,1))[test$Good_Customer]
d
confusionMatrix(pred.rf,test$Good_Customer), positive = "Yes", mode = "everything")
pred.rf
test$Good_Customer
confusionMatrix(pred.rf,test$Good_Customer), positive = "Yes", mode = "everything")
confusionMatrix(pred.rf,test$Good_Customer))
confusionMatrix(pred.rf,test$Good_Customer)
confusionMatrix(pred.rf,test$Good_Customer, positive = "Yes")
summary(rf.fit)
varImp((rf.fit))
varImp(rf.fit)
confusionMatrix(pred.rf,test$Good_Customer, positive = "Yes")
setwd("~/Documents/HKU/STAT2604/proj")
customer <- read.table("Customer Data", header = TRUE, sep = ";")
customer[customer==""] <- NA
customer = customer[, 2:16]
customer[,6] = factor(customer[,6], levels = c("1", "2", "3", "4", "5"))
customer[,7] = readr::parse_number(customer[,7])
customer[,11:15] <- lapply(customer[,11:15], factor)
summary(customer)
train_data_set <- createDataPartition(df$Good_Customer, p = .8, list = FALSE)
train <- df[ train_data_set,]
test <- df[-train_data_set,]
control <- trainControl(method="cv", number=10)
metric <- "Accuracy"
set.seed(123)
rf.fit <- train(Good_Customer ~ ., data=train, method="rf", metric=metric, trControl=control)
summary(rf.fit)
varImp(rf.fit)
train_data_set <- createDataPartition(df$Good_Customer, p = .8, list = FALSE)
train <- df[ train_data_set,]
test <- df[-train_data_set,]
control <- trainControl(method="cv", number=10)
metric <- "Accuracy"
set.seed(123)
rf.fit <- train(Good_Customer ~ ., data=train, method="rf", metric=metric, trControl=control)
train_data_set <- createDataPartition(df$Good_Customer, p = .8, list = FALSE)
customer <- na.omit(customer)
summary(customer)
df <- na.omit(customer)
summary(df)
train_data_set <- createDataPartition(df$Good_Customer, p = .8, list = FALSE)
train <- df[ train_data_set,]
test <- df[-train_data_set,]
control <- trainControl(method="cv", number=10)
metric <- "Accuracy"
set.seed(123)
rf.fit <- train(Good_Customer ~ ., data=train, method="rf", metric=metric, trControl=control)
summary(rf.fit)
varImp(rf.fit)
