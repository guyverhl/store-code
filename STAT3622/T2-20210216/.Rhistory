par(new=TRUE)
points(0.625, 0.825, pch = 11, col="yellow")
points(new[,1], new[,2], pch = 25, col="blue")
legend("topright", inset=c(-0.3,0), legend=c("Old","New"),
pch = c(1, 25), col = c("red", "blue"), box.lty=0)
library(RColorBrewer)
total_runs = 5
xlimit = c(1,total_runs)
ylimit = c(2, 3)
xlabel = seq(1,total_runs)
x = read.table("C:\\Users\\Administrator\\Desktop\\SeqUD Manuscript\\AAAI_SeqUD Manuscript\\results\\cliff.txt")
par(mar=c(4,4,4,2))
matplot(xlabel, x, type="b", xlab="", ylab="",
main = paste("Optimization Results for Cliff Function", sep = ""),
cex.main = 1.5, cex.axis = 1, xaxt = "n",
lty=c(2, 2, 1, 1, 2, 1), lwd=2,
pch = c(1, 3, 4, 5, 8, 16),
col=c(1, 3, 4, 5, 6, 2))
legend("bottomright", inset=c(0.01,0.01),
c("Grid", "Random", "TPE", "Spearmint", "SMAC", "SeqUDHO"),
col = c(1, 3, 4, 5, 6, 2),
lty=c(2, 2, 1, 1, 2, 1),
pch = c(1, 3, 4, 5, 8, 16),
cex=1, lwd = 2)
axis(1, at = xlabel, labels=c("20","40","60","80","100"), las=1, cex.axis = 1)
title(xlab= "Number of Trials", line=2.5, cex.lab=1.2)
title(ylab="Maximized Values", line=2.5, cex.lab=1.2)
library(RColorBrewer)
total_runs = 5
xlimit = c(1,total_runs)
ylimit = c(2, 3)
xlabel = seq(1,total_runs)
x = read.table("C:\\Users\\Administrator\\Desktop\\SeqUD Manuscript\\AAAI_SeqUD Manuscript\\results\\cliff.txt")
par(mar=c(4,4,4,2))
matplot(xlabel, x, type="b", xlab="", ylab="",
main = paste("Optimization Results for Cliff Function", sep = ""),
cex.main = 1.5, cex.axis = 1, xaxt = "n",
lty=c(2, 2, 1, 1, 2, 1), lwd=2,
pch = c(1, 3, 4, 5, 8, 16),
col=c(1, 3, 4, 5, 6, 2))
legend("bottomright", inset=c(0.01,0.01),
c("Grid", "Random", "TPE", "Spearmint", "SMAC", "SeqUDHO"),
col = c(1, 3, 4, 5, 6, 2),
lty=c(2, 2, 1, 1, 2, 1),
pch = c(1, 3, 4, 5, 8, 16),
cex=1, lwd = 2)
axis(1, at = xlabel, labels=c("20","40","60","80","100"), las=1, cex.axis = 1)
title(xlab= "Number of Trials", line=2.5, cex.lab=1.2)
title(ylab="Maximized Values", line=2.5, cex.lab=1.2)
library(RColorBrewer)
total_runs = 5
xlimit = c(1,total_runs)
ylimit = c(2, 3)
xlabel = seq(1,total_runs)
x = read.table("C:\\Users\\Administrator\\Desktop\\SeqUD Manuscript\\AAAI_SeqUD Manuscript\\results\\cliff.txt")
par(mar=c(4,4,4,2))
matplot(xlabel, x, type="b", xlab="", ylab="",
main = paste("Optimization Results for Cliff Function", sep = ""),
cex.main = 1.5, cex.axis = 1, xaxt = "n",
lty=c(2, 2, 1, 1, 2, 1), lwd=2,
pch = c(1, 3, 4, 5, 8, 16),
col=c(1, 3, 4, 5, 6, 2))
legend("bottomright", inset=c(0.01,0.01),
c("Grid", "Random", "TPE", "GP-EI", "SMAC", "SeqUDHO"),
col = c(1, 3, 4, 5, 6, 2),
lty=c(2, 2, 1, 1, 2, 1),
pch = c(1, 3, 4, 5, 8, 16),
cex=1, lwd = 2)
axis(1, at = xlabel, labels=c("20","40","60","80","100"), las=1, cex.axis = 1)
title(xlab= "Number of Trials", line=2.5, cex.lab=1.2)
title(ylab="Maximized Values", line=2.5, cex.lab=1.2)
library(RColorBrewer)
total_runs = 5
xlimit = c(1,total_runs)
ylimit = c(2, 3)
xlabel = seq(1,total_runs)
x = read.table("C:\\Users\\Administrator\\Desktop\\SeqUD Manuscript\\AAAI_SeqUD Manuscript\\results\\f7.txt")
par(mar=c(4,4,4,2))
matplot(xlabel, x, type="b", xlab="", ylab="",
main = paste("Optimization Results for Octopus Function", sep = ""),
cex.main = 1.5, cex.axis = 1, xaxt = "n",
lty=c(2, 2, 1, 1, 2, 1), lwd=2,
pch = c(1, 3, 4, 5, 8, 16),
col=c(1, 3, 4, 5, 6, 2))
legend("bottomright", inset=c(0.01,0.01),
c("Grid", "Random", "TPE", "Spearmint", "SMAC", "SeqUDHO"),
col = c(1, 3, 4, 5, 6, 2),
lty=c(2, 2, 1, 1, 2, 1),
pch = c(1, 3, 4, 5, 8, 16),
cex=1, lwd = 2)
axis(1, at = xlabel, labels=c("20","40","60","80","100"), las=1, cex.axis = 1)
title(xlab= "Number of Trials", line=2.5, cex.lab=1.2)
title(ylab="Maximized Values", line=2.5, cex.lab=1.2)
library(RColorBrewer)
total_runs = 5
xlimit = c(1,total_runs)
ylimit = c(2, 3)
xlabel = seq(1,total_runs)
x = read.table("C:\\Users\\Administrator\\Desktop\\SeqUD Manuscript\\AAAI_SeqUD Manuscript\\results\\cnn.txt")
par(mar=c(4,4,4,2))
matplot(xlabel, x, type="b", xlab="", ylab="",
main = paste("Optimization Results for CNN on Mnist", sep = ""),
cex.main = 1.5, cex.axis = 1, xaxt = "n",
lty=c(2, 1, 1, 2, 1), lwd=2,
pch = c(3, 4, 5, 8, 16),
col=c(3, 4, 5, 6, 2))
legend("bottomright", inset=c(0.01,0.01),
c("Random", "TPE", "GP-EI", "SMAC", "SeqUDHO"),
col = c( 3, 4, 5, 6, 2),
lty=c(2, 1, 1, 2, 1),
pch = c(3, 4, 5, 8, 16),
cex=1, lwd = 2)
axis(1, at = xlabel, labels=c("20","40","60","80","100"), las=1, cex.axis = 1)
title(xlab= "Number of Trials", line=2.5, cex.lab=1.2)
title(ylab="Maximized Values", line=2.5, cex.lab=1.2)
x = read.table("C:\\Users\\Administrator\\Desktop\\SeqUD Manuscript\\AAAI_SeqUD Manuscript\\results\\cliff.txt")
par(mar=c(4,4,4,2))
matplot(xlabel, x, type="b", xlab="", ylab="",
main = paste("Optimization Results for Cliff Function", sep = ""),
cex.main = 1.5, cex.axis = 1, xaxt = "n",
lty=c(2, 2, 1, 1, 2, 1), lwd=2,
pch = c(1, 3, 4, 5, 8, 16),
col=c(1, 3, 4, 5, 6, 2))
legend("bottomright", inset=c(0.01,0.01),
c("Grid", "Random", "TPE", "GP-EI", "SMAC", "SeqUDHO"),
col = c(1, 3, 4, 5, 6, 2),
lty=c(2, 2, 1, 1, 2, 1),
pch = c(1, 3, 4, 5, 8, 16),
cex=1, lwd = 2)
axis(1, at = xlabel, labels=c("20","40","60","80","100"), las=1, cex.axis = 1)
title(xlab= "Number of Trials", line=2.5, cex.lab=1.2)
title(ylab="Maximized Values", line=2.5, cex.lab=1.2)
x = read.table("C:\\Users\\Administrator\\Desktop\\SeqUD Manuscript\\AAAI_SeqUD Manuscript\\results\\cliff.txt")
par(mar=c(4,4,4,2))
matplot(xlabel, x, type="b", xlab="", ylab="",
main = paste("Optimization Results for Cliff Function", sep = ""),
cex.main = 1.5, cex.axis = 1, xaxt = "n",
lty=c(2, 2, 1, 1, 2, 1), lwd=2,
pch = c(1, 3, 4, 5, 8, 16),
col=c(1, 3, 4, 5, 6, 2))
legend("bottomright", inset=c(0.01,0.01),
c("Grid", "Random", "TPE", "GP-EI", "SMAC", "SeqUDHO"),
col = c(1, 3, 4, 5, 6, 2),
lty=c(2, 2, 1, 1, 2, 1),
pch = c(1, 3, 4, 5, 8, 16),
cex=1, lwd = 2)
axis(1, at = xlabel, labels=c("20","40","60","80","100"), las=1, cex.axis = 1)
title(xlab= "Number of Trials", line=2.5, cex.lab=1.2)
title(ylab="Maximized Values", line=2.5, cex.lab=1.2)
x = read.table("C:\\Users\\Administrator\\Desktop\\SeqUD Manuscript\\AAAI_SeqUD Manuscript\\results\\cliff.txt")
par(mar=c(4,4,4,2))
matplot(xlabel, x, type="b", xlab="", ylab="",
main = paste("Optimization Results for Cliff Function", sep = ""),
cex.main = 1.5, cex.axis = 1, xaxt = "n",
lty=c(2, 2, 1, 1, 2, 1), lwd=2,
pch = c(1, 3, 4, 5, 8, 16),
col=c(1, 3, 4, 5, 6, 2))
legend("bottomright", inset=c(0.01,0.01),
c("Grid", "Random", "TPE", "GP-EI", "SMAC", "SeqUDHO"),
col = c(1, 3, 4, 5, 6, 2),
lty=c(2, 2, 1, 1, 2, 1),
pch = c(1, 3, 4, 5, 8, 16),
cex=1, lwd = 2)
axis(1, at = xlabel, labels=c("20","40","60","80","100"), las=1, cex.axis = 1)
title(xlab= "Number of Trials", line=2.5, cex.lab=1.2)
title(ylab="Maximized Values", line=2.5, cex.lab=1.2)
x = read.table("C:\\Users\\Administrator\\Desktop\\SeqUD Manuscript\\AAAI_SeqUD Manuscript\\results\\f7_K=2.txt")
par(mar=c(4,4,4,2))
matplot(xlabel, x, type="b", xlab="", ylab="",
main = paste("Optimization Results for Octopus Function", sep = ""),
cex.main = 1.5, cex.axis = 1, xaxt = "n",
lty=c(2, 2, 1, 1, 2, 1), lwd=2,
pch = c(1, 3, 4, 5, 8, 16),
col=c(1, 3, 4, 5, 6, 2))
legend("bottomright", inset=c(0.01,0.01),
c("Grid", "Random", "TPE", "Spearmint", "SMAC", "SeqUDHO"),
col = c(1, 3, 4, 5, 6, 2),
lty=c(2, 2, 1, 1, 2, 1),
pch = c(1, 3, 4, 5, 8, 16),
cex=1, lwd = 2)
axis(1, at = xlabel, labels=c("20","40","60","80","100"), las=1, cex.axis = 1)
title(xlab= "Number of Trials", line=2.5, cex.lab=1.2)
title(ylab="Maximized Values", line=2.5, cex.lab=1.2)
library(RColorBrewer)
total_runs = 5
xlimit = c(1,total_runs)
ylimit = c(2, 3)
xlabel = seq(1,total_runs)
x = read.table("C:\\Users\\Administrator\\Desktop\\SeqUD Manuscript\\AAAI_SeqUD Manuscript\\results\\f7_K=2.txt")
par(mar=c(4,4,4,2))
matplot(xlabel, x, type="b", xlab="", ylab="",
main = paste("Optimization Results for Octopus Function", sep = ""),
cex.main = 1.5, cex.axis = 1, xaxt = "n",
lty=c(2, 2, 1, 1, 2, 1), lwd=2,
pch = c(1, 3, 4, 5, 8, 16),
col=c(1, 3, 4, 5, 6, 2))
legend("bottomright", inset=c(0.01,0.01),
c("Grid", "Random", "TPE", "GP-EI", "SMAC", "SeqUDHO"),
col = c(1, 3, 4, 5, 6, 2),
lty=c(2, 2, 1, 1, 2, 1),
pch = c(1, 3, 4, 5, 8, 16),
cex=1, lwd = 2)
axis(1, at = xlabel, labels=c("20","40","60","80","100"), las=1, cex.axis = 1)
title(xlab= "Number of Trials", line=2.5, cex.lab=1.2)
title(ylab="Maximized Values", line=2.5, cex.lab=1.2)
library(RColorBrewer)
total_runs = 5
xlimit = c(1,total_runs)
ylimit = c(2, 3)
xlabel = seq(1,total_runs)
x = read.table("C:\\Users\\Administrator\\Desktop\\SeqUD Manuscript\\AAAI_SeqUD Manuscript\\results\\cnn.txt")
par(mar=c(4,4,4,2))
matplot(xlabel, x, type="b", xlab="", ylab="",
main = paste("Optimization Results for CNN on Mnist", sep = ""),
cex.main = 1.5, cex.axis = 1, xaxt = "n",
lty=c(2, 1, 1, 2, 1), lwd=2,
pch = c(3, 4, 5, 8, 16),
col=c(3, 4, 5, 6, 2))
legend("bottomright", inset=c(0.01,0.01),
c("Random", "TPE", "GP-EI", "SMAC", "SeqUDHO"),
col = c( 3, 4, 5, 6, 2),
lty=c(2, 1, 1, 2, 1),
pch = c(3, 4, 5, 8, 16),
cex=1, lwd = 2)
axis(1, at = xlabel, labels=c("20","40","60","80","100"), las=1, cex.axis = 1)
title(xlab= "Number of Trials", line=2.5, cex.lab=1.2)
title(ylab="Maximized Values", line=2.5, cex.lab=1.2)
x
matplot(xlabel, x, type="b", xlab="", ylab="",
main = paste("Optimization Results for CNN on Mnist", sep = ""),
cex.main = 1.5, cex.axis = 1, xaxt = "n",
lty=c(2, 1, 1, 2, 1), lwd=2,
pch = c(3, 4, 5, 8, 16),
col=c(3, 4, 5, 6, 2))
matplot(xlabel, x[,1], type="b", xlab="", ylab="",
main = paste("Optimization Results for CNN on Mnist", sep = ""),
cex.main = 1.5, cex.axis = 1, xaxt = "n",
lty=c(2, 1, 1, 2, 1), lwd=2,
pch = c(3, 4, 5, 8, 16),
col=c(3, 4, 5, 6, 2))
matplot(xlabel, x[,2], type="b", xlab="", ylab="",
main = paste("Optimization Results for CNN on Mnist", sep = ""),
cex.main = 1.5, cex.axis = 1, xaxt = "n",
lty=c(2, 1, 1, 2, 1), lwd=2,
pch = c(3, 4, 5, 8, 16),
col=c(3, 4, 5, 6, 2))
matplot(xlabel, x[,3], type="b", xlab="", ylab="",
main = paste("Optimization Results for CNN on Mnist", sep = ""),
cex.main = 1.5, cex.axis = 1, xaxt = "n",
lty=c(2, 1, 1, 2, 1), lwd=2,
pch = c(3, 4, 5, 8, 16),
col=c(3, 4, 5, 6, 2))
matplot(xlabel, x[,4], type="b", xlab="", ylab="",
main = paste("Optimization Results for CNN on Mnist", sep = ""),
cex.main = 1.5, cex.axis = 1, xaxt = "n",
lty=c(2, 1, 1, 2, 1), lwd=2,
pch = c(3, 4, 5, 8, 16),
col=c(3, 4, 5, 6, 2))
library(RColorBrewer)
total_runs = 5
xlimit = c(1,total_runs)
ylimit = c(2, 3)
xlabel = seq(1,total_runs)
x = read.table("C:\\Users\\Administrator\\Desktop\\SeqUD Manuscript\\AAAI_SeqUD Manuscript\\results\\cliff.txt")
par(mar=c(4,4,4,2))
matplot(xlabel, x, type="b", xlab="", ylab="",
main = paste("Optimization Results for Cliff Function", sep = ""),
cex.main = 1.5, cex.axis = 1, xaxt = "n",
lty=c(2, 2, 1, 1, 2, 1), lwd=2,
pch = c(1, 3, 4, 5, 8, 16),
col=c(1, 3, 4, 5, 6, 2))
legend("bottomright", inset=c(0.01,0.01),
c("Grid", "Rand", "TPE", "GP-EI", "SMAC", "SeqUDHO"),
col = c(1, 3, 4, 5, 6, 2),
lty=c(2, 2, 1, 1, 2, 1),
pch = c(1, 3, 4, 5, 8, 16),
cex=1, lwd = 2)
axis(1, at = xlabel, labels=c("20","40","60","80","100"), las=1, cex.axis = 1)
title(xlab= "Number of Trials", line=2.5, cex.lab=1.2)
title(ylab="Maximized Values", line=2.5, cex.lab=1.2)
library(RColorBrewer)
total_runs = 5
xlimit = c(1,total_runs)
ylimit = c(2, 3)
xlabel = seq(1,total_runs)
x = read.table("C:\\Users\\Administrator\\Desktop\\SeqUD Manuscript\\AAAI_SeqUD Manuscript\\results\\f7_K=2.txt")
par(mar=c(4,4,4,2))
matplot(xlabel, x, type="b", xlab="", ylab="",
main = paste("Optimization Results for Octopus Function", sep = ""),
cex.main = 1.5, cex.axis = 1, xaxt = "n",
lty=c(2, 2, 1, 1, 2, 1), lwd=2,
pch = c(1, 3, 4, 5, 8, 16),
col=c(1, 3, 4, 5, 6, 2))
legend("bottomright", inset=c(0.01,0.01),
c("Grid", "Rand", "TPE", "GP-EI", "SMAC", "SeqUDHO"),
col = c(1, 3, 4, 5, 6, 2),
lty=c(2, 2, 1, 1, 2, 1),
pch = c(1, 3, 4, 5, 8, 16),
cex=1, lwd = 2)
axis(1, at = xlabel, labels=c("20","40","60","80","100"), las=1, cex.axis = 1)
title(xlab= "Number of Trials", line=2.5, cex.lab=1.2)
title(ylab="Maximized Values", line=2.5, cex.lab=1.2)
library(RColorBrewer)
total_runs = 5
xlimit = c(1,total_runs)
ylimit = c(2, 3)
xlabel = seq(1,total_runs)
x = read.table("C:\\Users\\Administrator\\Desktop\\SeqUD Manuscript\\AAAI_SeqUD Manuscript\\results\\cnn.txt")
par(mar=c(4,4,4,2))
matplot(xlabel, x[,4], type="b", xlab="", ylab="",
main = paste("Optimization Results for CNN on Mnist", sep = ""),
cex.main = 1.5, cex.axis = 1, xaxt = "n",
lty=c(2, 1, 1, 2, 1), lwd=2,
pch = c(3, 4, 5, 8, 16),
col=c(3, 4, 5, 6, 2))
legend("bottomright", inset=c(0.01,0.01),
c("Rand", "TPE", "GP-EI", "SMAC", "SeqUDHO"),
col = c( 3, 4, 5, 6, 2),
lty=c(2, 1, 1, 2, 1),
pch = c(3, 4, 5, 8, 16),
cex=1, lwd = 2)
axis(1, at = xlabel, labels=c("20","40","60","80","100"), las=1, cex.axis = 1)
title(xlab= "Number of Trials", line=2.5, cex.lab=1.2)
title(ylab="Maximized Values", line=2.5, cex.lab=1.2)
x = read.table("C:\\Users\\Administrator\\Desktop\\SeqUD Manuscript\\AAAI_SeqUD Manuscript\\results\\cnn.txt")
par(mar=c(4,4,4,2))
matplot(xlabel, x, type="b", xlab="", ylab="",
main = paste("Optimization Results for CNN on Mnist", sep = ""),
cex.main = 1.5, cex.axis = 1, xaxt = "n",
lty=c(2, 1, 1, 2, 1), lwd=2,
pch = c(3, 4, 5, 8, 16),
col=c(3, 4, 5, 6, 2))
legend("bottomright", inset=c(0.01,0.01),
c("Rand", "TPE", "GP-EI", "SMAC", "SeqUDHO"),
col = c( 3, 4, 5, 6, 2),
lty=c(2, 1, 1, 2, 1),
pch = c(3, 4, 5, 8, 16),
cex=1, lwd = 2)
axis(1, at = xlabel, labels=c("20","40","60","80","100"), las=1, cex.axis = 1)
title(xlab= "Number of Trials", line=2.5, cex.lab=1.2)
title(ylab="Maximized Values", line=2.5, cex.lab=1.2)
library(UniDOE)
options(warn=-1)
# generate sequential UD
GenSUD <- function(X0,n,s,q,crit="CL2", maxiter=10000, hits_ratio = 0.1,vis=FALSE)
{
X0 = as.matrix(X0)
#restrictions for arguments:
if(n<=1 || s<=0 || q <=1 ){stop("Error: Please input valid X0.")
} else if(is.matrix(X0)==FALSE){stop("Error: Please input X0 to do the augmented searching. End of program...")
} else if(is.numeric(n) == FALSE){stop("Error: Wrong types of n. End of program...")
} else if(n%%q != 0){stop("Error: n should multiple of level. End of program...")
} else if(n<=nrow(X0)) {stop("Error: n should be larger than the row number of X0")}
if(crit == "maximin"){crit=1
} else if(crit == "CD2"){crit=2
} else if(crit == "WD2"){crit=4
} else{crit=3}
# 1. Make up for the origianl design to a U-type design
original_design_freq = matrix(0, nrow = q, ncol = s)
for (i in 1:s)
{
original_design_freq[,i] = tapply(X0[,i], factor(X0[,i], levels = 1:q), length)
original_design_freq[is.na(original_design_freq[,i]), i]=0
}
max_k = max(max(original_design_freq), n/q)
add_design_runs = max_k - original_design_freq
initX = NULL
for (i in 1:s)
{
new_factor = NULL
for (j in 1:q)
{
new_factor = c(new_factor, rep(j,add_design_runs[j,i]))
}
initX = cbind(initX, new_factor)
}
#2. recall Rcpp compiled SATA_AUD function to add new design runs:
list= SATA_AUD(X0, n - nrow(X0), s, q, init="input", initX=initX, crit, maxiter, hits_ratio)
if(vis == TRUE){
plot(list$obj_list,type="l")
bst_score = list$obj
min_index = which.min(list$obj_list)[1]
abline(v = min_index,col=2)
abline(h =list$obj_list[min_index],col=4 )
title(main = c("best_score = ",bst_score))
}
names(list) = c("initial_design","final_design","initial_criterion",
"criterion_value","time_consumed","criterion_list")
# TODO: The current UNIDOE version has a bug when n-nrow(X0) = 1, which is due to the constraint in Generate_init_matrix(),
# So here, a temporary solution is implemented, and will be removed as the UNIDOE is updated.
if ((n - nrow(X0))==1)
{
list$final_design[nrow(list$final_design),] = as.vector(initX)
}
return(list)
}
#### AUGUD DEMO
old = GenUD(30, 2, 30, crit = "CD2")$final_design[1:10,]
new = GenSUD(old, 30, 2, 30, crit = "CD2")$final_design[11:30,]
new = (new * 2 -1 ) / 60
old = (old * 2 -1 ) / 60
par(mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE)
plot(old[,1], old[,2], xlim=range(0:1), ylim=range(0:1), pch =19, col="red", axes=FALSE, ann=FALSE)
par(new=TRUE)
points(new[,1], new[,2], pch = 17, col="blue")
legend("topright", inset=c(-0.7,0), legend=c("Existing Trials","Augmented Trials"), pch = c(19, 17), col = c("red", "blue"), box.lty=0)
rect(0, 0, 1, 1, lty=1)
legend("topright", inset=c(-0.5,0), legend=c("Existing Trials","Augmented Trials"), pch = c(19, 17), col = c("red", "blue"), box.lty=0)
rect(0, 0, 1, 1, lty=1)
legend("topright", inset=c(-0.6,0), legend=c("Existing Trials","Augmented Trials"), pch = c(19, 17), col = c("red", "blue"), box.lty=0)
par(mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE)
plot(old[,1], old[,2], xlim=range(0:1), ylim=range(0:1), pch =19, col="red", axes=FALSE, ann=FALSE)
par(new=TRUE)
points(new[,1], new[,2], pch = 17, col="blue")
legend("topright", inset=c(-0.6,0), legend=c("Existing Trials","Augmented Trials"), pch = c(19, 17), col = c("red", "blue"), box.lty=0)
rect(0, 0, 1, 1, lty=1)
options(width=100)
knitr::opts_chunk$set(echo = TRUE, message=FALSE, message=FALSE)
x = vector("numeric",length=10)
x
df = data.frame(col1 = 1:3, col2 = c("this","is","text"), col3 = c(TRUE,FALSE,TRUE),col4 = c(2.5,4.2,pi))
df
df[,2]
df2 = data.frame(col1 = 1:3, col2 = c("this","is","text"), col3 = c(TRUE,FALSE,TRUE),col4 = c(2.5,4.2,pi),stringsAsFactors=FALSE)
x
colnames(df) = c("New York","Seattle","Los Angeles","Chicago")
rownames(df) = c("ROW1","ROW2","ROW3")
# Convert a matrix to data.frame
cc = matrix(1:6,3,2)
df = as.data.frame(cc)
colnames(df) = c("COL1","COL2")
df
colnames(df) = c("New York","Seattle","Los Angeles")
rownames(df) = c("ROW1","ROW2","ROW3")
colnames(df) = c("New York","Seattle","Los Angeles")
colnames(df) = c("New York","Los Angeles")
rownames(df) = c("ROW1","ROW2","ROW3")
names(x) = c(letters[1:length(x)])
x
v2 = c(name1=2,name2=3,name3=9)
v2
n = c(2,3,5)
s = c("aa","bb","cc","dd","ee")
c(n, s)
# Exclude elements
x[-4] #all except the fourth element
x
# Combine Vectors
n = c(2,3,5)
s = c("aa","bb","cc","dd","ee")
c(n, s)
# Exclude Elements
s[-4] #all except the fourth element
s
# Exclude Elements
s[-4] #all except the fourth element
sum(a), mean(a), sd(a)
head(iris, 2)
a <- array(c('green','yellow'),dim = c(3,3,2))
print(a)
column.names <- c("COL1","COL2","COL3")
row.names <- c("ROW1","ROW2","ROW3")
matrix.names <- c("Matrix1","Matrix2")
# Take these vectors as input to the array.
result <- array(c(vector1,vector2),dim = c(3,3,2),dimnames = list(row.names,column.names,
matrix.names))
# Take these vectors as input to the array.
result <- array(c('green','yellow'),dim = c(3,3,2),dimnames = list(row.names,column.names,
matrix.names))
print(result)
.libPaths()
myString <- "Hello, World!"
print(myString)
library(animation)
### Animations in HTML pages ####
saveHTML({
ani.options(interval = 0.05, nmax = 30)
par(mar = c(3, 3, 2, 3), mgp = c(2, 0.5,10), tcl = .5, cex.axis = 1,
cex.lab = 1, cex.main = 1)
brownian.motion(pch = 21, cex = 10, col = "red", bg = "yellow",
main = "Demonstration of Brownian Motion")
}, img.name = "bm_plot", title = "Demonstration of Brownian Motion",
description = c("Random walk on the 2D plane: for each point",
"(x, y), x = x + rnorm(1) and y = y + rnorm(1)."))
saveGIF({
ani.options(nmax = 30)
brownian.motion(pch = 21, cex = 10, col = "red", bg = "yellow")
}, interval = 0.05, movie.name = "bm_demo.gif", ani.width = 600, ani.height = 600)
### GIF animations with sine & cosine functions###
saveGIF({
for(i in 1:100){
curve(sin(x), from = -5 + (i * 0.05), to = 5 + (i * 0.05), col = "red", ylab = "")
curve(cos(x), from = -5 + (i * 0.05), to = 5 + (i * 0.05), add = TRUE, col = "blue", ylab = "")
legend("topright", legend = c("sin(x)", "cos(x)"), fill = c("red", "blue"), bty = "n")
}
}, interval = 0.1, ani.width = 550, ani.height = 350)
### GIF animations with sine & cosine functions###
saveGIF({
for(i in 1:100){
curve(sin(x), from = -5 + (i * 0.05), to = 5 + (i * 0.05), col = "red", ylab = "")
curve(cos(x), from = -5 + (i * 0.05), to = 5 + (i * 0.05), add = TRUE, col = "blue", ylab = "")
legend("topright", legend = c("sin(x)", "cos(x)"), fill = c("red", "blue"), bty = "n")
}
}, interval = 0.1, ani.width = 550, ani.height = 350)
library(animation)
### Animations in HTML pages ####
saveGIF({
ani.options(nmax = 30)
brownian.motion(pch = 21, cex = 10, col = "red", bg = "yellow")
}, interval = 0.05, movie.name = "bm_demo.gif", ani.width = 600, ani.height = 600)
setwd("E:/HKU data/Courses/Stat3622/tutorial/T2")
knit_with_parameters('E:/HKU data/Courses/Stat3622/tutorial/T2/t.Rmd')
