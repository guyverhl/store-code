a1_result=prcomp(tempfd$fd)
a1_result=prcomp(tempfd$fd$coefs)
dim(tempfd$fd$coefs)
library(fda)
daybasis12 = create.fourier.basis(c(0,12),12)
harmLfd = vec2Lfd(c(0,(2*pi/12)^2,0), c(0, 12))
tempfdPar = fdPar(daybasis12,harmLfd,1e4)
tke=seq(1,365,length.out = 12) #choose 12 days of the year
tempfd = smooth.basis(1:12,daily$tempav[tke,],tempfdPar)
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(tempfd$fd,xlab='day',ylab='temperature',cex.lab=1.5,cex.axis=1.5)
tempfd=daily$tempav[tke,]
library(fda)
tke=seq(1,365,length.out = 12) #choose 12 days of the year
tempfd=daily$tempav[tke,]
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(tempfd,xlab='day',ylab='temperature',cex.lab=1.5,cex.axis=1.5)
library(fda)
tke=seq(1,365,length.out = 12) #choose 12 days of the year
tempfd=daily$tempav[tke,]
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
matplot(tempfd,xlab='day',ylab='temperature',cex.lab=1.5,cex.axis=1.5)
library(fda)
tke=seq(1,365,length.out = 12) #choose 12 days of the year
tempfd=daily$tempav[tke,]
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
matplot(tempfd,xlab='day',ylab='temperature',cex.lab=1.5,cex.axis=1.5,type="l")
temppca = pca.fd(tempfd,nharm=4)
daybasis12 = create.fourier.basis(c(0,12),12)
harmLfd = vec2Lfd(c(0,(2*pi/12)^2,0), c(0, 12))
tempfdPar = fdPar(daybasis12,harmLfd,1e4)
tke=seq(1,365,length.out = 12) #choose 12 days of the year
tempfd = smooth.basis(1:12,daily$tempav[tke,],tempfdPar)
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(tempfd$fd,xlab='day',ylab='temperature',cex.lab=1.5,cex.axis=1.5)
daybasis365 = create.fourier.basis(c(0,365),365)
# harmonic acceleration differential operator
harmLfd = vec2Lfd(c(0,(2*pi/365)^2,0), c(0, 365))
tempfdPar = fdPar(daybasis365,harmLfd,1e4)
tempfd = smooth.basis(1:365,daily$tempav,tempfdPar)
dim(tempfd$fd$coefs)
daybasis365 = create.fourier.basis(c(0,36),36)
# harmonic acceleration differential operator
harmLfd = vec2Lfd(c(0,(2*pi/36)^2,0), c(0, 36))
tempfdPar = fdPar(daybasis365,harmLfd,1e4)
tempfd = smooth.basis(1:36,daily$tempav,tempfdPar)
daybasis365 = create.fourier.basis(c(0,36),36)
# harmonic acceleration differential operator
harmLfd = vec2Lfd(c(0,(2*pi/36)^2,0), c(0, 36))
tempfdPar = fdPar(daybasis365,harmLfd,1e4)
tempfd = smooth.basis(1:36,daily$tempav[1:36,],tempfdPar)
dim(tempfd$fd$coefs)
daybasis365 = create.fourier.basis(c(0,365),365)
# harmonic acceleration differential operator
harmLfd = vec2Lfd(c(0,(2*pi/365)^2,0), c(0, 365))
tempfdPar = fdPar(daybasis365,harmLfd,1e4)
tempfd = smooth.basis(1:365,daily$tempav,tempfdPar)
dim(tempfd$fd$coefs)
dim(daily$tempav)
dim(daily$tempav[1:36,])
daybasis365
dim(daybasis365)
daybasis366 = create.fourier.basis(c(0,366),366)
daybasis12 = create.fourier.basis(c(0,13),13)
daybasis13 = create.fourier.basis(c(0,13),13)
harmLfd = vec2Lfd(c(0,(2*pi/13)^2,0), c(0, 13))
tempfdPar = fdPar(daybasis12,harmLfd,1e4)
tke=seq(1,365,length.out = 13) #choose 12 days of the year
tempfd = smooth.basis(1:13,daily$tempav[tke,],tempfdPar)
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
plot(tempfd$fd,xlab='day',ylab='temperature',cex.lab=1.5,cex.axis=1.5)
temppca = pca.fd(tempfd$fd,nharm=4)
names(temppca)
temppca$varprop #giving the proportion of variance explained by each pc
plot(temppca$meanfd,lwd=2.5,col=2)
par(mfrow=c(1,2))
plot(temppca$values[1:8],xlab='component',ylab='variance',col="red",cex=2)
plot(cumsum(temppca$values[1:10])/sum(temppca$values),xlab='Number of Components',	ylab='cumulative variance explained',cex=2)
abline(h=0.99)
library("kdensity")
kde = kdensity(temppca$scores[,1], start = "gumbel", kernel = "gaussian")
rbPal <- colorRampPalette(c('red','blue'))
Col <- rbPal(10)[as.numeric(cut(temppca$scores[,1],breaks = 10))]
plot(kde, main = "Score kde",xlim=c(-100,100),ylim=c(0,0.02),xlab="PC1")
points(temppca$scores[,1],rep(0.015,35),col=Col)
temppca$harmonics$coefs[,1]
temppca$harmonics$coefs[,1:4]
options(htmltools.dir.version = FALSE)
library(fda)
tke=seq(1,365,length.out = 12) #choose 12 days of the year
tempfd=daily$tempav[tke,]
par(mfrow=c(1,1),mar = c(8, 8, 4, 2))
matplot(tempfd,xlab='day',ylab='temperature',cex.lab=1.5,cex.axis=1.5,type="l")
biplot(pca_result, scale = 0) #try to find the difference when *scale*=1
temppca = prcomp(tempfd,scale=TRUE)
names(temppca)
temppca$varprop #giving the proportion of variance explained by each pc
plot(temppca$meanfd,lwd=2.5,col=2)
temppca = prcomp(tempfd,scale=TRUE)
temppca$center # means
temppca$scale  # standard deviations
temppca$rotation
temppca = prcomp(tempfd,scale=TRUE)
temppca$center
temppca = prcomp(t(tempfd),scale=TRUE)
plot(1:12,temppca$center) # means
plot(1:12,temppca$center,type="l") # means
plot(1:12,temppca$center,type="l",ylab="Mean Temp") # means
temppca = prcomp(t(tempfd),scale=TRUE)
plot(1:12,temppca$center,type="l",ylab="Mean Temp") # means
temppca$scale  # standard deviations
temppca$rotation
temppca$scale
temppca = prcomp(t(tempfd),scale=TRUE)
plot(1:12,temppca$center,type="l",ylab="Mean Temp") # means
temppca$scale  # standard deviations
head(temppca$x)
head(temppca$x)
```
head(temppca$x[,1:3])
```
head(temppca$x[,1:3])
```
head(temppca$x[,1:3])
head(temppca$x[,1:3])
temppca$x <- -temppca$x
temppca$rotation <- -temppca$rotation
library("kdensity")
kde = kdensity(temppca$x[,1], start = "gumbel", kernel = "gaussian")
rbPal <- colorRampPalette(c('red','blue'))
Col <- rbPal(10)[as.numeric(cut(temppca$scores[,1],breaks = 10))]
Col <- rbPal(10)[as.numeric(cut(temppca$x[,1],breaks = 10))]
plot(kde, main = "Score kde",xlim=c(-100,100),ylim=c(0,0.02),xlab="PC1")
plot(kde, main = "Score kde",xlim=c(-20,20),ylim=c(0,0.02),xlab="PC1")
plot(kde, main = "Score kde",xlim=c(-20,20),ylim=c(0,0.2),xlab="PC1")
plot(kde, main = "Score kde",xlim=c(-15,8),ylim=c(0,0.2),xlab="PC1")
points(temppca$scores[,1],rep(0.1,35),col=Col)
library("kdensity")
kde = kdensity(temppca$x[,1], start = "gumbel", kernel = "gaussian")
rbPal <- colorRampPalette(c('red','blue'))
Col <- rbPal(10)[as.numeric(cut(temppca$x[,1],breaks = 10))]
plot(kde, main = "Score kde",xlim=c(-15,8),ylim=c(0,0.2),xlab="PC1")
points(temppca$x[,1],rep(0.1,35),col=Col)
temppca$rotation[,1]
pt=kronecker(temppca$rotation[,1],temppca$x[,1])
12*35
pt=matrix(temppca$rotation[,1],ncol=1)%*%matrix(temppca$x[,1],nrow=1)
matplot(pt,type="l")
pt=matrix(temppca$rotation[,1],ncol=1)%*%matrix(temppca$x[,1],nrow=1)
matplot(pt,type="l")
```
pt=matrix(temppca$rotation[,1],ncol=1)%*%matrix(temppca$x[,1],nrow=1)
matplot(pt,type="l")
pt=matrix(temppca$rotation[,2],ncol=1)%*%matrix(temppca$x[,2],nrow=1)
matplot(pt,type="l")
pt1=matrix(temppca$rotation[,1],ncol=1)%*%matrix(temppca$x[,1],nrow=1)
pt2=matrix(temppca$rotation[,2],ncol=1)%*%matrix(temppca$x[,2],nrow=1)
par(mfrow=c(1,2))
matplot(pt1,type="l",main="PC1 proj")
matplot(pt2,type="l",main="PC2 proj")
pt1=matrix(temppca$rotation[,1],ncol=1)%*%matrix(temppca$x[,1],nrow=1)
pt2=matrix(temppca$rotation[,2],ncol=1)%*%matrix(temppca$x[,2],nrow=1)
par(mfrow=c(1,2))
matplot(pt1,type="l",main="PC1 proj")
matplot(pt2,type="l",main="PC2 proj")
pt1=matrix(temppca$rotation[,1],ncol=1)%*%matrix(temppca$x[,1],nrow=1)
pt2=matrix(temppca$rotation[,2],ncol=1)%*%matrix(temppca$x[,2],nrow=1)
par(mfrow=c(1,2))
matplot(pt1,type="l",main="PC1 proj")
matplot(pt2,type="l",main="PC2 proj")
library("kdensity")
kde = kdensity(temppca$x[,1], start = "gumbel", kernel = "gaussian")
rbPal <- colorRampPalette(c('red','blue'))
Col <- rbPal(10)[as.numeric(cut(temppca$x[,1],breaks = 10))]
par(mfrow=c(1,2))
plot(kde, main = "Score kde",xlim=c(-15,8),ylim=c(0,0.2),xlab="PC1")
points(temppca$x[,1],rep(0.1,35),col=Col)
plot(temppca$x[,1],temppca$x[,2], main = "Score 1 VS Score 2",xlab="PC1",ylab="PC2")
library("kdensity")
kde = kdensity(temppca$x[,1], start = "gumbel", kernel = "gaussian")
rbPal <- colorRampPalette(c('red','blue'))
Col <- rbPal(10)[as.numeric(cut(temppca$x[,1],breaks = 10))]
par(mfrow=c(1,2))
plot(kde, main = "Score kde",xlim=c(-15,8),ylim=c(0,0.2),xlab="PC1")
points(temppca$x[,1],rep(0.1,35),col=Col)
plot(temppca$x[,1],temppca$x[,2], main = "Score 1 VS Score 2",xlab="PC1",ylab="PC2",col=Col)
par(mfrow=c(1,2))
biplot(pca_result, scale = 1)
biplot(pca_result, scale = 0)
par(mfrow=c(1,2))
biplot(pca_result, scale = 1,cex=F)
biplot(pca_result, scale = 0)
par(mfrow=c(1,2))
biplot(pca_result, scale = 1,cex=0)
biplot(pca_result, scale = 0)
biplot(pca_result, scale = 1,cex=0)
head(temppca$rotation[,1:3])
head(temppca$x[,1:3])
temppca$x <- -temppca$x
temppca$rotation <- -temppca$rotation
setwd("F:/NANA/OneDrive - connect.hku.hk/tutorial/3622 A2")
knitr::opts_chunk$set(echo = TRUE)
a <- read.csv("HKHomeCCL.csv")
a_melt = melt(a, id.vars = "Date")
a <- read.csv("HKHomeCCL.csv")
a_melt = melt(a, id.vars = "Date")
library(ggplot2)
library(tidyr)
library(plotly)
a <- read.csv("HKHomeCCL.csv")
ggplot(a_melt, aes(x = Date, y = value))+
geom_line(aes(color = variable))+ ggtitle(paste("Home Prices by Region"))+
labs(x="Date",y="Price")+
theme(plot.title = element_text(size=20,face="bold"))+
scale_x_date(date_breaks = "2 years",date_labels = "%Y")
library(ggplot2)
library(tidyr)
library(plotly)
a <- read.csv("HKHomeCCL.csv")
ggplot(a_melt, aes(x = Date, y = value))+
geom_line(aes(color = variable))+ ggtitle(paste("Home Prices by Region"))+
labs(x="Date",y="Price")+
theme(plot.title = element_text(size=20,face="bold"))+
scale_x_date(date_breaks = "2 years",date_labels = "%Y")
a_melt = melt(a, id.vars = "Date")
library(sp)
library(knitr)
a_melt = melt(a, id.vars = "Date")
library(reshape)
install.packages("reshape")
library(ggplot2)
library(tidyr)
library(plotly)
library(reshape)
library(knitr)
library(sp)
a_melt = melt(a, id.vars = "Date")
a_melt$Date = as.Date(a_melt$Date)
ggplot(a_melt, aes(x = Date, y = value))+
geom_line(aes(color = variable))+ ggtitle(paste("Home Prices by Region"))+
labs(x="Date",y="Price")+
theme(plot.title = element_text(size=20,face="bold"))+
scale_x_date(date_breaks = "2 years",date_labels = "%Y")
library(ggplot2)
library(tidyr)
library(plotly)
library(reshape)
library(knitr)
library(sp)
a <- read.csv("HKHomeCCL.csv")
a_melt = melt(a, id.vars = "Date")
a_melt$Date = as.Date(a_melt$Date)
ggplot(a_melt, aes(x = Date, y = value))+
geom_line(aes(color = variable))+ ggtitle(paste("Home Prices by Region"))+
labs(x="Date",y="Price")+
theme(plot.title = element_text(size=20,face="bold"))+
scale_x_date(date_breaks = "2 years",date_labels = "%Y")
hkmap = readRDS("HKG_adm1.rds")
class(hkmap)
hkmapdf = fortify(hkmap)
ggplot(hkmapdf, aes(long, lat, group=group, fill=id)) +
geom_polygon(show.legend = T) +
ggtitle(paste("Map of Hong Kong by ID"))+
theme(plot.title = element_text(size=20,face="bold"))
hkmap = readRDS("HKG_adm1.rds")
class(hkmap)
hkmapdf = fortify(hkmap)
ggplot(hkmapdf, aes(long, lat, group=group, fill=id)) +
geom_polygon(show.legend = T) +
guides(fill=guide_legend(title='ID', ncol = 2)) +
ggtitle(paste("Map of Hong Kong by ID"))+
theme(plot.title = element_text(size=20,face="bold"))
hkprices = data.frame(Region=names(a)[-1], Price=as.numeric(a[1,-1]))
pricemeta = merge(hkmapmeta, hkprices, by = "Region", sort = FALSE)
hk_dis = read.csv("HK18Districts.csv")
hkmapmeta = data.frame(mapid=hkmap$ID_1, Code=hkmap$HASC_1)
hkmapmeta$Code = gsub('HK.', '', as.character(hkmapmeta$Code))
hkmapmeta = merge(hk_dis, hkmapmeta, by="Code", sort=FALSE)
MAPc = merge(hkmapdf,hkmapmeta, by.x="id", by.y="mapid")
ggplot(MAPc, aes(long, lat, group=group, fill=Region)) + geom_polygon()+
ggtitle(paste("Hong Kong by Regions"))+
theme(plot.title = element_text(size = 20, face = "bold"))
hkprices = data.frame(Region=names(a)[-1], Price=as.numeric(a[1,-1]))
pricemeta = merge(hkmapmeta, hkprices, by = "Region", sort = FALSE)
MAPd = merge(hkmapdf, pricemeta, by.x="id", by.y="mapid")
ggplot(MAPd, aes(long, lat, group=group, fill = Price))+
geom_polygon() + scale_fill_gradient(limits=c(30,200),
low = "green", high = "red") + ggtitle(paste("Home Price
Index by Regions as of", a$Date[1])) +
theme(plot.title = element_text(size = 20, face = "bold"))
setwd("F:/NANA/OneDrive - connect.hku.hk/tutorial/t9")
install.packages("meta")
install.packages("meta")
options(htmltools.dir.version = FALSE)
load("binarydata.RData")
str(binarydata)
m.bin <- metabin(Ee,Ne,Ec,Nc,
data = binarydata,
studlab = paste(Author),
comb.fixed = T,comb.random = T,
method = 'MH',sm = "RR")
library(meta)
method = 'MH',sm = "RR")
library(netmeta)
data(Linde2015)
Linde.te <- pairwise(list(treatment1, treatment2, treatment3),
event = list(resp1, resp2, resp3),
n = list(n1, n2, n3), studlab = id,
data = Linde2015, sm = "OR")
head(Linde.te)
Linde.net = netmeta(TE = TE, seTE = seTE, treat1 = treat1,
treat2 = treat2, studlab = studlab,
data = Linde.te,
comb.fixed = T, comb.random = T,
reference.group = "Placebo")
Linde.net
Linde.net = netmeta(TE = TE, seTE = seTE, treat1 = treat1,
treat2 = treat2, studlab = studlab,
data = Linde.te,
comb.fixed = T, comb.random = T,
reference.group = "Placebo")
Linde.te$TE
library(netmeta)
data(Linde2015)
head(Linde2015)
Linde.te <- pairwise(list(treatment1, treatment2, treatment3),
event = list(resp1, resp2, resp3),
n = list(n1, n2, n3), studlab = id,
data = Linde2015, sm = "OR")
head(Linde.te)
# Network meta-analysis
Linde.net = netmeta(TE = TE, seTE = seTE, treat1 = treat1,
treat2 = treat2, studlab = studlab,
data = Linde.te,
comb.fixed = T, comb.random = T,
reference.group = "Placebo")
Linde.net
Linde.net = netmeta(TE = TE, seTE = seTE, treat1 = treat1,
treat2 = treat2, studlab = studlab,
data = Linde.te,
comb.fixed = T, comb.random = T,
reference.group = "Placebo")
netgraph(Linde.net, plastic = F, thickness = "number.of.studies", col = 'black')
netgraph(Linde.net, plastic = F, thickness = "number.of.studies", col = 'black')
netgraph(Linde.net, plastic = F, thickness = "number.of.studies", col = 'black')
summary(Linde.net, reference.group = 'Placebo', comb.fixed = T, comb.random = F)
summary(Linde.net, reference.group = 'Placebo', comb.fixed = T, comb.random = F)
Linde.netleague <- netleague(Linde.net, bracket = "(", digits=2)
Linde.netleague$fixed
Linde.netleague$random
Linde.netleague <- netleague(Linde.net, bracket = "(", digits=2)
Linde.netleague$fixed
Linde.net.split = netsplit(Linde.net, reference.group = "Placebo",
baseline.reference = T,
comb.fixed = T, comb.random = T)
Linde.net.split = netsplit(Linde.net, reference.group = "Placebo",
baseline.reference = T,
comb.fixed = T, comb.random = T)
Linde.net.split
forest(Linde.net.split, pooled = 'fixed')
metabin
m.bin <- metabin(Ee,Ne,Ec,Nc,
data = binarydata,
studlab = paste(Author),
comb.fixed = T,comb.random = T,
method = 'MH',sm = "RR")
forest(m.bin, leftcols = c('studlab'))
Linde.netleague$fixed
Linde.netleague$fixed
Linde.netleague$fixed
Linde.netleague$fixed
Linde.netleague$fixed
Linde.netleague$fixed
Linde.netleague$fixed
Linde.netleague$random
forest(Linde.net.split, pooled = 'fixed')
??mtc.network
library(gemtc)
Linde.net.split = netsplit(Linde.net, reference.group = "Placebo",
baseline.reference = T,
comb.fixed = T, comb.random = T)
head(Linde.net.split)
Linde.net.split$fixed
head(Linde.net.split$fixed)
Linde.net.split$comparison
summary(Linde.net.split)
Linde.net.split$comb.fixed
Linde.net.split$version
Linde.net.split
forest(Linde.net, reference.group = 'Placebo',
pooled = 'random', leftcols = c('studlab', 'effect', 'effect.ci'), rightcols = F)
library(netmeta)
data(Linde2015)
head(Linde2015)
Linde.te <- pairwise(list(treatment1, treatment2, treatment3),
event = list(resp1, resp2, resp3),
n = list(n1, n2, n3), studlab = id,
data = Linde2015, sm = "OR")
Linde.net = netmeta(TE = TE, seTE = seTE, treat1 = treat1,
treat2 = treat2, studlab = studlab,
data = Linde.te,
comb.fixed = T, comb.random = T,
reference.group = "Placebo")
Linde.net.split = netsplit(Linde.net, reference.group = "Placebo",
baseline.reference = T,
comb.fixed = T, comb.random = T)
Linde.net.split
mortality = read.csv("Mortality_COVID.csv")
forest(mortality.net, reference.group = 'soc',
pooled = 'fixed')
mortality.net = netmeta(TE = TE, seTE = seTE, treat1 = treat1,
treat2 = treat2, studlab = studlab,
data = mortality.te,
comb.fixed = T, comb.random = T,
reference.group = "soc")
mortality.te <- pairwise(treat = Intervention,
event = Event,
n = Total, studlab = Registration.number,
data = mortality, sm = "OR")
mortality.net = netmeta(TE = TE, seTE = seTE, treat1 = treat1,
treat2 = treat2, studlab = studlab,
data = mortality.te,
comb.fixed = T, comb.random = T,
reference.group = "soc")
forest(mortality.net, reference.group = 'soc',
pooled = 'fixed')
pdf("Q2d.pdf", width = 8, height = 12)
forest(mortality.net, reference.group = 'soc',
pooled = 'fixed')
dev.off()
mortality.net.split = netsplit(mortality.net, reference.group = "soc",
baseline.reference = T,
comb.fixed = T, comb.random = F)
mortality = read.csv("Mortality_COVID.csv")
head(mortality)
# (a)
# Calculate contrast-based treatment effect estimates
mortality.te <- pairwise(treat = Intervention,
event = Event,
n = Total, studlab = Registration.number,
data = mortality, sm = "OR")
# Network meta-analysis
mortality.net = netmeta(TE = TE, seTE = seTE, treat1 = treat1,
treat2 = treat2, studlab = studlab,
data = mortality.te,
comb.fixed = T, comb.random = T,
reference.group = "soc")
mortality.net
pdf("Q2b.pdf", width = 12, height = 10)
netgraph(mortality.net, plastic = F, thickness = "se.fixed",  col = 'black')
dev.off()
decomp.design(mortality.net)
compare_list = c("hydroxychloroquine:remdesivir",
"hydroxychloroquine_plus_azithromycin:soc",
"interferon_beta:lopinavir_ritonavir")
mortality.net.split$direct.fixed[mortality.net.split$direct.fixed$comparison
%in% compare_list,]
mortality.net.split$indirect.fixed[mortality.net.split$indirect.fixed$comparison
%in% compare_list,]
mortality.net.split$fixed[mortality.net.split$fixed$comparison
%in% compare_list, ]
mortality.net.split = netsplit(mortality.net, reference.group = "soc",
baseline.reference = T,
comb.fixed = T, comb.random = F)
compare_list = c("hydroxychloroquine:remdesivir",
"hydroxychloroquine_plus_azithromycin:soc",
"interferon_beta:lopinavir_ritonavir")
mortality.net.split$direct.fixed[mortality.net.split$direct.fixed$comparison
%in% compare_list,]
mortality.net.split$indirect.fixed[mortality.net.split$indirect.fixed$comparison
%in% compare_list,]
mortality.net.split$fixed[mortality.net.split$fixed$comparison
%in% compare_list, ]
mortality.rank = netrank(mortality.net, small.values = 'good')
mortality.rank
pdf("Q2f.pdf", width = 12, height = 18)
par(mar = c(16,5,3,0))
barplot(mortality.rank$Pscore.fixed,
beside = T, ylab = 'P-scores', ylim = c(0,1), las = 2)
dev.off()
# Data input
paclitaxel = read.csv("jaha_paclitaxel.csv")
# Data input
paclitaxel = read.csv("jaha_paclitaxel.csv")
paclitaxel.2 = paclitaxel[paclitaxel$Period=='2',]
# 2-year result
res.pac.2 = metabin(event.e = P.Events, n.e = P.Total,
event.c = C.Events, n.c = C.Total, studlab = Study,
data = paclitaxel.2, sm = 'RR',
comb.fixed = T, comb.random = T,
method = 'MH')
options(htmltools.dir.version = FALSE)
netrank(Linde.net, small.values = 'bad')
library(netmeta)
data(Linde2015)
Linde.te <- pairwise(list(treatment1, treatment2, treatment3),
event = list(resp1, resp2, resp3),
n = list(n1, n2, n3), studlab = id,
data = Linde2015, sm = "OR")
Linde.net = netmeta(TE = TE, seTE = seTE, treat1 = treat1,
treat2 = treat2, studlab = studlab,
data = Linde.te,
comb.fixed = T, comb.random = T,
reference.group = "Placebo")
netrank(Linde.net, small.values = 'bad')
Linde.rank=netrank(Linde.net, small.values = 'bad')
barplot(Linde.rank$Pscore.fixed,
beside = T, ylab = 'P-scores', ylim = c(0,1), las = 2)
barplot(Linde.rank$Pscore.fixed,Linde.rank$Pscore.random,
beside = T, ylab = 'P-scores', ylim = c(0,1), las = 2)
barplot(rbind(Linde.rank$Pscore.fixed,Linde.rank$Pscore.random),
beside = T, ylab = 'P-scores', ylim = c(0,1), las = 2)
